apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: "{{ template "kong.fullname" . }}"
  labels:
    app: "{{ template "kong.name" . }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "kong.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
    {{- end }}
      labels:
        app: {{ template "kong.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: "{{ template "kong.fullname" . }}-service-account"
      initContainers:
      - name: kong-migration
        image: "{{ .Values.image.name }}"
        env:
          - name: KONG_PG_HOST
            value: {{ template "kong.postgresql.fullname" . }}
          - name: KONG_PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "kong.postgresql.fullname" . }}
                key: postgres-password
        command: [ "/bin/sh", "-c", "kong migrations up" ]
      containers:
      {{ if .Values.ingress.enabled }}
      - name: ingress-controller
        args:
        - /kong-ingress-controller
        # the kong URL points to the kong admin api server
        - --kong-url=http://localhost:8001
        # the default service is the kong proxy service
        - --default-backend-service={{ .Release.Namespace }}/{{ template "kong.fullname" . }}-proxyhttp
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: kong-docker-kubernetes-ingress-controller.bintray.io/kong-ingress-controller:0.0.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      {{ end }}
      - name: {{ template "kong.name" . }}
        image: "{{ .Values.image.name }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        {{- if .Values.admin.useTLS }}
        - name: KONG_ADMIN_LISTEN_SSL
          value: 0.0.0.0:{{ .Values.admin.containerPort }}
        - name: KONG_ADMIN_SSL
          value: "on"
        {{- else }}
        - name: KONG_ADMIN_LISTEN
          value: 0.0.0.0:{{ .Values.admin.containerPort }}
        - name: KONG_ADMIN_SSL
          value: "off"
        {{- end }}
        {{- range $key, $val := .Values.env }}
        - name: KONG_{{ $key | upper}}
          value: {{ $val | quote }}
        {{- end}}
        {{- if .Values.postgresql.enabled }}
        - name: KONG_PG_HOST
          value: {{ template "kong.postgresql.fullname" . }}
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "kong.postgresql.fullname" . }}
              key: postgres-password
        {{- end }}
        {{- if .Values.cassandra.enabled }}
        - name: KONG_CASSANDRA_CONTACT_POINTS
          value: {{ template "kong.cassandra.fullname" . }}
        {{- end }}
        ports:
        - name: admin
          containerPort: {{ .Values.admin.containerPort }}
          protocol: TCP
        - name: proxy
          containerPort: {{ .Values.proxyhttp.containerPort }}
          protocol: TCP
        - name: proxyhttps
          containerPort: {{ .Values.proxyhttps.containerPort }}
          protocol: TCP
        volumeMounts:
        - name: {{ template "kong.fullname" . }}
          mountPath: /etc/kong/kong.conf
          subPath: kong.conf
        readinessProbe:
{{ toYaml .Values.readinessProbe | indent 10 }}
        livenessProbe:
{{ toYaml .Values.livenessProbe | indent 10 }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
    {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      volumes:
      - name: {{ template "kong.fullname" . }}
        configMap:
          name: "{{ template "kong.fullname" . }}"-config
